# Generated from lib/rubocop/cop/domainic/dev/base.rb with RBS::Inline

module RuboCop
  module Cop
    module Domainic
      module Dev
        # The base class for all Domainic::Dev cops
        #
        # @author {https://aaronmallen.me Aaron Allen}
        # @since 0.2.0
        #
        # @abstract Subclass and implement Cop behavior
        # @api private
        class Base < RuboCop::Cop::Base
          # Node wrapper mappings
          #
          # @author {https://aaronmallen.me Aaron Allen}
          # @since 0.2.0
          #
          # @api private
          #
          # @return [Hash{Symbol => Class<RuboCop::Domainic::Dev::AST::NodeWrapper>}]
          NODE_WRAPPER_MAP: Hash[Symbol, singleton(RuboCop::Domainic::Dev::AST::NodeWrapper)]

          # Override the default Badge for the Domainic::Dev cops
          #
          # This overrides the default RuboCop::Cop::Badge for Domainic::Dev cops to allow for nesting within the
          # RuboCop::Cop::Domainic::Dev namespace without requiring an overly verbose cop name
          #
          # @author {https://aaronmallen.me Aaron Allen}
          # @since 0.2.0
          #
          # @api private
          #
          # @return [Rubocop::Cop::Badge] the badge for the Cop
          # @rbs () -> untyped
          def self.badge: () -> untyped

          def attribute_method?: (untyped node) -> untyped

          # Override the default cop_config with custom config classes when they're available
          #
          # @author {https://aaronmallen.me Aaron Allen}
          # @since 0.2.0
          #
          # @api private
          #
          # @return [Hash, Object] the cop configuration
          # @rbs () -> untyped
          def cop_config: () -> untyped

          private

          # Get a wrapped node
          #
          # @author {https://aaronmallen.me Aaron Allen}
          # @since 0.2.0
          #
          # @api private
          #
          # @param node [RuboCop::AST::Node] the node to wrap
          #
          # @return [RuboCop::Domainic::Dev::AST::NodeWrapper] the wrapped node
          # @rbs (untyped node) -> RuboCop::Domainic::Dev::AST::NodeWrapper
          def wrapped_node: (untyped node) -> RuboCop::Domainic::Dev::AST::NodeWrapper
        end
      end
    end
  end
end
